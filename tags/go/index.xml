<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - Tag - </title>
        <link>http://example.org/tags/go/</link>
        <description>go - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>opiximeo@gmail.com (jaejin)</managingEditor>
            <webMaster>opiximeo@gmail.com (jaejin)</webMaster><lastBuildDate>Sun, 08 Jan 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Retry patterns과 aws sdk waiters</title>
    <link>http://example.org/retry-patterns/</link>
    <pubDate>Sun, 08 Jan 2023 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/retry-patterns/</guid>
    <description><![CDATA[<p>어플리케이션이 어떤 작업을 시도할 때 실패하게 되면 오류가 일시적인 부분이 많아 다시 요청을 하는 것이 좋다고 생각한다.</p>
<p>그에 따라 retry patterns라고 불리는 것들이 있었고 이를 정리해보려고 한다.</p>]]></description>
</item><item>
    <title>Goroutines vs Threads</title>
    <link>http://example.org/goroutinesvsthreads/</link>
    <pubDate>Fri, 26 Feb 2021 23:49:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/goroutinesvsthreads/</guid>
    <description><![CDATA[<p>go routine과 thread를 비교해보자</p>]]></description>
</item><item>
    <title>Golang chanchan</title>
    <link>http://example.org/chanchan/</link>
    <pubDate>Wed, 10 Jul 2019 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/chanchan/</guid>
    <description><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">channel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>go에 대해 channel은 대략 알겠지만 chan chan 이란 또 무엇인가..</p>]]></description>
</item><item>
    <title>Operating system in golang</title>
    <link>http://example.org/mastergo01/</link>
    <pubDate>Mon, 07 Jan 2019 16:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/mastergo01/</guid>
    <description><![CDATA[<p>Go 마스터하기 책을 공부하면서 기록한다.</p>]]></description>
</item><item>
    <title>Go modules (mod)</title>
    <link>http://example.org/gomod/</link>
    <pubDate>Sat, 22 Dec 2018 16:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/gomod/</guid>
    <description><![CDATA[<p>go 1.11 버전에서는 go modules 가 도입되어 시험적으로 사용할 수 있게 되었다.</p>]]></description>
</item><item>
    <title>Go dependency management tool (dep)</title>
    <link>http://example.org/godep/</link>
    <pubDate>Sat, 22 Dec 2018 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/godep/</guid>
    <description><![CDATA[<p>Go 언어 에서는 <a href="https://github.com/golang/dep" target="_blank" rel="noopener noreffer">dep</a> 으로 의존성 관리를 하고 있었다.</p>
<p>하지만</p>
<p>Once Go 1.11 is out, it really makes very little sense for a new project not already using dep to start using it. Dep has many, many problems - some of which Sam acknowledged in the talk - and you avoid all of them, avoid taking the time to master a system that is going away, and help make Go modules better by simply using Go modules from the start.</p>
<p>이렇다&hellip;</p>]]></description>
</item></channel>
</rss>
