<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>grpc - Tag - </title>
        <link>http://example.org/tags/grpc/</link>
        <description>grpc - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>opiximeo@gmail.com (jaejin)</managingEditor>
            <webMaster>opiximeo@gmail.com (jaejin)</webMaster><lastBuildDate>Mon, 09 Sep 2019 16:58:26 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/grpc/" rel="self" type="application/rss+xml" /><item>
    <title>Building microservices in Go and Python using gRPC</title>
    <link>http://example.org/grpc2/</link>
    <pubDate>Mon, 09 Sep 2019 16:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/grpc2/</guid>
    <description><![CDATA[<p><a href="https://jaejin1.github.io/grpc1/" target="_blank" rel="noopener noreffer">이전글</a>에서 작성 한 go server를 가지고 python 에서 client로 접속해보자.</p>]]></description>
</item><item>
    <title>Introduction to gRPC</title>
    <link>http://example.org/grpc1/</link>
    <pubDate>Sun, 08 Sep 2019 15:58:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/grpc1/</guid>
    <description><![CDATA[<p>gRPC는 원경의 Client가 Server 단의 함수를 로컬 함수를 호출하듯 부를 수 있게 해준다.<br>
이때 메시지를 보내고 받는데는 protocol buffers를 사용하고 HTTP/2 기반의 Streaming을 지원하며 REST 대비 빠른 성능을 지원한다.</p>
<p>gRPC의 특징 중 하나는 Java, Ruby, Node, Python, Go등 과 같은 프로그래밍 언어를 지원하고 MSA (마이크로 서비스 아키텍쳐)와 조합이 매력적이다.</p>]]></description>
</item></channel>
</rss>
